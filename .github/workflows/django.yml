# .github/workflows/django_ci.yml

name: Django CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main", "develop" ] # Triggers the workflow on push events to main and develop branches
  pull_request:
    branches: [ "main", "develop" ] # Triggers the workflow on pull request events to main and develop branches

jobs:
  build:
    runs-on: ubuntu-latest # Specifies the runner environment
    strategy:
      max-parallel: 4 # Max number of parallel jobs
      matrix:
        python-version: ["3.9", "3.10", "3.11"] # Runs the job for specified Python versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
      # Sets up the specified Python version

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # It's good practice to install project-specific dependencies like linters here if they are in requirements.txt
        # Or install them separately:
        # pip install flake8 black ruff # Add other linters/formatters as needed
      # Upgrades pip and installs dependencies from requirements.txt

    - name: Lint with Flake8 (Example)
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # Runs Flake8 linter. Adjust rules as per your project's standards.
      # Consider adding other linters/formatters like Black or Ruff.

    - name: Run Tests
      env: # Environment variables for the test run
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_TEST }} # Example: Using a GitHub secret for Django's SECRET_KEY
        DEBUG: "False"
        DATABASE_URL: "sqlite:///:memory:" # Example: Using SQLite in-memory for tests
        # Add other environment variables your Django settings might need for tests
        # Ensure your settings.py is configured to use these environment variables for testing
      run: |
        python manage.py test
      # Executes Django tests.
      # Ensure your settings are configured to pick up environment variables for testing
      # (e.g., using an in-memory SQLite database to speed up tests and avoid external dependencies).

    # Optional: Add steps for building Docker images, deploying to staging/production, etc.
    # - name: Build Docker image
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Example: Only build on push to main
    #   run: |
    #     docker build -t my-django-app .
    #     # docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
    #     # docker push my-django-app:latest

    # - name: Deploy to Staging (Example)
    #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    #   uses: some-deploy-action@v1 # Replace with your deployment action/script
    #   with:
    #     server_ip: ${{ secrets.STAGING_SERVER_IP }}
    #     ssh_private_key: ${{ secrets.STAGING_SSH_KEY }}
    #     app_name: "my-django-app-staging"

    # - name: Deploy to Production (Example)
    #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #   uses: some-deploy-action@v1 # Replace with your deployment action/script
    #   with:
    #     server_ip: ${{ secrets.PROD_SERVER_IP }}
    #     ssh_private_key: ${{ secrets.PROD_SSH_KEY }}
    #     app_name: "my-django-app-prod"
